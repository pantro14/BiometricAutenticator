package carvajal.autenticador.android.dal.greendao.write;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import carvajal.autenticador.android.dal.greendao.read.DaoMaster.OpenHelper;
import carvajal.autenticador.android.dal.greendao.write.NovedadesDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 2): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
	public static final int SCHEMA_VERSION = 2;

	/** Creates underlying database table using DAOs. */
	public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
		NovedadesDao.createTable(db, ifNotExists);
	}

	/** Drops underlying database table using DAOs. */
	public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
		NovedadesDao.dropTable(db, ifExists);
	}

	public static abstract class OpenHelper extends SQLiteOpenHelper {

		public OpenHelper(Context context, String name, CursorFactory factory) {
			super(context, name, factory, SCHEMA_VERSION);
		}

		@Override
		public void onCreate(SQLiteDatabase db) {
			Log.i("greenDAO", "Creating tables for schema version "
					+ SCHEMA_VERSION);
			createAllTables(db, false);
		}
	}

	/** WARNING: Drops all table on Upgrade! Use only during development. */
	public static class DevOpenHelper extends OpenHelper {
		private String PATH_DATA_BASE = null;
		private String NAME_DATA_BASE = null;

		public DevOpenHelper(Context context, String name, CursorFactory factory) {
			super(context, name, factory);
		}

		public DevOpenHelper(Context context, String path, String name,
				CursorFactory factory) {
			super(context, name, factory);
			this.PATH_DATA_BASE = path;
			this.NAME_DATA_BASE = name;
		}

		@Override
		public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
			Log.i("greenDAO", "Upgrading schema from version " + oldVersion
					+ " to " + newVersion + " by dropping all tables");
			dropAllTables(db, true);
			onCreate(db);
		}

		/**
		 * Custom getWritableDatabase
		 */
		@Override
		public synchronized SQLiteDatabase getWritableDatabase() {
			// TODO Auto-generated method stub
			// return
			// SQLiteDatabase.openDatabase(PATH_DATA_BASE.concat(NAME_DATA_BASE),
			// null, SQLiteDatabase.OPEN_READWRITE |
			// SQLiteDatabase.NO_LOCALIZED_COLLATORS);
			return SQLiteDatabase.openOrCreateDatabase(
					PATH_DATA_BASE.concat(NAME_DATA_BASE), null);
		}
	}

	public DaoMaster(SQLiteDatabase db) {
		super(db, SCHEMA_VERSION);
		registerDaoClass(NovedadesDao.class);
	}

	public DaoSession newSession() {
		return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
	}

	public DaoSession newSession(IdentityScopeType type) {
		return new DaoSession(db, type, daoConfigMap);
	}

}
