package carvajal.autenticador.android.dal.greendao.write;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import carvajal.autenticador.android.dal.greendao.write.Novedades;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NOVEDADES.
*/
public class NovedadesDao extends AbstractDao<Novedades, Long> {

    public static final String TABLENAME = "NOVEDADES";

    /**
     * Properties of entity Novedades.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TipoNovedad = new Property(1, String.class, "TipoNovedad", false, "TIPO_NOVEDAD");
        public final static Property Cedula = new Property(2, String.class, "Cedula", false, "CEDULA");
        public final static Property CodProv = new Property(3, String.class, "CodProv", false, "COD_PROV");
        public final static Property CodMpio = new Property(4, String.class, "CodMpio", false, "COD_MPIO");
        public final static Property CodZona = new Property(5, String.class, "CodZona", false, "COD_ZONA");
        public final static Property CodColElec = new Property(6, String.class, "CodColElec", false, "COD_COL_ELEC");
        public final static Property CodMesa = new Property(7, String.class, "CodMesa", false, "COD_MESA");
        public final static Property FechaNovedad = new Property(8, String.class, "FechaNovedad", false, "FECHA_NOVEDAD");
        public final static Property TipoElector = new Property(9, String.class, "TipoElector", false, "TIPO_ELECTOR");
        public final static Property TemplateHit = new Property(10, String.class, "TemplateHit", false, "TEMPLATE_HIT");
        public final static Property AndroidId = new Property(11, String.class, "AndroidId", false, "ANDROID_ID");
        public final static Property Score = new Property(12, String.class, "Score", false, "SCORE");
        public final static Property CodProvConf = new Property(13, String.class, "CodProvConf", false, "COD_PROV_CONF");
        public final static Property CodMpioConf = new Property(14, String.class, "CodMpioConf", false, "COD_MPIO_CONF");
        public final static Property CodZonaConf = new Property(15, String.class, "CodZonaConf", false, "COD_ZONA_CONF");
        public final static Property CodColElecConf = new Property(16, String.class, "CodColElecConf", false, "COD_COL_ELEC_CONF");
        public final static Property CodMesaConf = new Property(17, String.class, "CodMesaConf", false, "COD_MESA_CONF");
        public final static Property Sync = new Property(18, String.class, "Sync", false, "SYNC");
    };


    public NovedadesDao(DaoConfig config) {
        super(config);
    }
    
    public NovedadesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NOVEDADES' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TIPO_NOVEDAD' TEXT NOT NULL ," + // 1: TipoNovedad
                "'CEDULA' TEXT NOT NULL ," + // 2: Cedula
                "'COD_PROV' TEXT," + // 3: CodProv
                "'COD_MPIO' TEXT," + // 4: CodMpio
                "'COD_ZONA' TEXT," + // 5: CodZona
                "'COD_COL_ELEC' TEXT," + // 6: CodColElec
                "'COD_MESA' TEXT," + // 7: CodMesa
                "'FECHA_NOVEDAD' TEXT NOT NULL ," + // 8: FechaNovedad
                "'TIPO_ELECTOR' TEXT," + // 9: TipoElector
                "'TEMPLATE_HIT' TEXT," + // 10: TemplateHit
                "'ANDROID_ID' TEXT NOT NULL ," + // 11: AndroidId
                "'SCORE' TEXT," + // 12: Score
                "'COD_PROV_CONF' TEXT," + // 13: CodProvConf
                "'COD_MPIO_CONF' TEXT," + // 14: CodMpioConf
                "'COD_ZONA_CONF' TEXT," + // 15: CodZonaConf
                "'COD_COL_ELEC_CONF' TEXT," + // 16: CodColElecConf
                "'COD_MESA_CONF' TEXT," + // 17: CodMesaConf
                "'SYNC' TEXT);"); // 18: Sync
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOVEDADES'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Novedades entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTipoNovedad());
        stmt.bindString(3, entity.getCedula());
 
        String CodProv = entity.getCodProv();
        if (CodProv != null) {
            stmt.bindString(4, CodProv);
        }
 
        String CodMpio = entity.getCodMpio();
        if (CodMpio != null) {
            stmt.bindString(5, CodMpio);
        }
 
        String CodZona = entity.getCodZona();
        if (CodZona != null) {
            stmt.bindString(6, CodZona);
        }
 
        String CodColElec = entity.getCodColElec();
        if (CodColElec != null) {
            stmt.bindString(7, CodColElec);
        }
 
        String CodMesa = entity.getCodMesa();
        if (CodMesa != null) {
            stmt.bindString(8, CodMesa);
        }
        stmt.bindString(9, entity.getFechaNovedad());
 
        String TipoElector = entity.getTipoElector();
        if (TipoElector != null) {
            stmt.bindString(10, TipoElector);
        }
 
        String TemplateHit = entity.getTemplateHit();
        if (TemplateHit != null) {
            stmt.bindString(11, TemplateHit);
        }
        stmt.bindString(12, entity.getAndroidId());
 
        String Score = entity.getScore();
        if (Score != null) {
            stmt.bindString(13, Score);
        }
 
        String CodProvConf = entity.getCodProvConf();
        if (CodProvConf != null) {
            stmt.bindString(14, CodProvConf);
        }
 
        String CodMpioConf = entity.getCodMpioConf();
        if (CodMpioConf != null) {
            stmt.bindString(15, CodMpioConf);
        }
 
        String CodZonaConf = entity.getCodZonaConf();
        if (CodZonaConf != null) {
            stmt.bindString(16, CodZonaConf);
        }
 
        String CodColElecConf = entity.getCodColElecConf();
        if (CodColElecConf != null) {
            stmt.bindString(17, CodColElecConf);
        }
 
        String CodMesaConf = entity.getCodMesaConf();
        if (CodMesaConf != null) {
            stmt.bindString(18, CodMesaConf);
        }
 
        String Sync = entity.getSync();
        if (Sync != null) {
            stmt.bindString(19, Sync);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Novedades readEntity(Cursor cursor, int offset) {
        Novedades entity = new Novedades( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // TipoNovedad
            cursor.getString(offset + 2), // Cedula
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CodProv
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CodMpio
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CodZona
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CodColElec
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CodMesa
            cursor.getString(offset + 8), // FechaNovedad
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // TipoElector
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // TemplateHit
            cursor.getString(offset + 11), // AndroidId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Score
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // CodProvConf
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // CodMpioConf
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // CodZonaConf
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // CodColElecConf
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // CodMesaConf
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // Sync
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Novedades entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTipoNovedad(cursor.getString(offset + 1));
        entity.setCedula(cursor.getString(offset + 2));
        entity.setCodProv(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCodMpio(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCodZona(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCodColElec(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCodMesa(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFechaNovedad(cursor.getString(offset + 8));
        entity.setTipoElector(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTemplateHit(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAndroidId(cursor.getString(offset + 11));
        entity.setScore(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCodProvConf(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCodMpioConf(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCodZonaConf(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCodColElecConf(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCodMesaConf(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setSync(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Novedades entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Novedades entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
