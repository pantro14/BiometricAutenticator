package carvajal.autenticador.android.dal.greendao.read;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import carvajal.autenticador.android.dal.greendao.read.Censo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CENSO.
*/
public class CensoDao extends AbstractDao<Censo, String> {

    public static final String TABLENAME = "CENSO";

    /**
     * Properties of entity Censo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Cedula = new Property(0, String.class, "Cedula", true, "CEDULA");
        public final static Property PriApellido = new Property(1, String.class, "PriApellido", false, "PRI_APELLIDO");
        public final static Property SegApellido = new Property(2, String.class, "SegApellido", false, "SEG_APELLIDO");
        public final static Property PriNombre = new Property(3, String.class, "PriNombre", false, "PRI_NOMBRE");
        public final static Property SegNombre = new Property(4, String.class, "SegNombre", false, "SEG_NOMBRE");
        public final static Property Sexo = new Property(5, int.class, "Sexo", false, "SEXO");
        public final static Property FecExpedicion = new Property(6, String.class, "FecExpedicion", false, "FEC_EXPEDICION");
        public final static Property CodProv = new Property(7, String.class, "CodProv", false, "COD_PROV");
        public final static Property CodMpio = new Property(8, String.class, "CodMpio", false, "COD_MPIO");
        public final static Property CodZona = new Property(9, String.class, "CodZona", false, "COD_ZONA");
        public final static Property CodColElec = new Property(10, String.class, "CodColElec", false, "COD_COL_ELEC");
        public final static Property CodMesa = new Property(11, String.class, "CodMesa", false, "COD_MESA");
        public final static Property TipoElector = new Property(12, int.class, "TipoElector", false, "TIPO_ELECTOR");
        public final static Property ElectorImpedido = new Property(13, int.class, "ElectorImpedido", false, "ELECTOR_IMPEDIDO");
        public final static Property Foto = new Property(14, byte[].class, "Foto", false, "FOTO");
    };


    public CensoDao(DaoConfig config) {
        super(config);
    }
    
    public CensoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CENSO' (" + //
                "'CEDULA' TEXT PRIMARY KEY NOT NULL ," + // 0: Cedula
                "'PRI_APELLIDO' TEXT NOT NULL ," + // 1: PriApellido
                "'SEG_APELLIDO' TEXT," + // 2: SegApellido
                "'PRI_NOMBRE' TEXT NOT NULL ," + // 3: PriNombre
                "'SEG_NOMBRE' TEXT," + // 4: SegNombre
                "'SEXO' INTEGER NOT NULL ," + // 5: Sexo
                "'FEC_EXPEDICION' TEXT NOT NULL ," + // 6: FecExpedicion
                "'COD_PROV' TEXT NOT NULL ," + // 7: CodProv
                "'COD_MPIO' TEXT NOT NULL ," + // 8: CodMpio
                "'COD_ZONA' TEXT NOT NULL ," + // 9: CodZona
                "'COD_COL_ELEC' TEXT NOT NULL ," + // 10: CodColElec
                "'COD_MESA' TEXT NOT NULL ," + // 11: CodMesa
                "'TIPO_ELECTOR' INTEGER NOT NULL ," + // 12: TipoElector
                "'ELECTOR_IMPEDIDO' INTEGER NOT NULL ," + // 13: ElectorImpedido
                "'FOTO' BLOB NOT NULL );"); // 14: Foto
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CENSO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Censo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getCedula());
        stmt.bindString(2, entity.getPriApellido());
 
        String SegApellido = entity.getSegApellido();
        if (SegApellido != null) {
            stmt.bindString(3, SegApellido);
        }
        stmt.bindString(4, entity.getPriNombre());
 
        String SegNombre = entity.getSegNombre();
        if (SegNombre != null) {
            stmt.bindString(5, SegNombre);
        }
        stmt.bindLong(6, entity.getSexo());
        stmt.bindString(7, entity.getFecExpedicion());
        stmt.bindString(8, entity.getCodProv());
        stmt.bindString(9, entity.getCodMpio());
        stmt.bindString(10, entity.getCodZona());
        stmt.bindString(11, entity.getCodColElec());
        stmt.bindString(12, entity.getCodMesa());
        stmt.bindLong(13, entity.getTipoElector());
        stmt.bindLong(14, entity.getElectorImpedido());
        stmt.bindBlob(15, entity.getFoto());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Censo readEntity(Cursor cursor, int offset) {
        Censo entity = new Censo( //
            cursor.getString(offset + 0), // Cedula
            cursor.getString(offset + 1), // PriApellido
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SegApellido
            cursor.getString(offset + 3), // PriNombre
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // SegNombre
            cursor.getInt(offset + 5), // Sexo
            cursor.getString(offset + 6), // FecExpedicion
            cursor.getString(offset + 7), // CodProv
            cursor.getString(offset + 8), // CodMpio
            cursor.getString(offset + 9), // CodZona
            cursor.getString(offset + 10), // CodColElec
            cursor.getString(offset + 11), // CodMesa
            cursor.getInt(offset + 12), // TipoElector
            cursor.getInt(offset + 13), // ElectorImpedido
            cursor.getBlob(offset + 14) // Foto
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Censo entity, int offset) {
        entity.setCedula(cursor.getString(offset + 0));
        entity.setPriApellido(cursor.getString(offset + 1));
        entity.setSegApellido(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPriNombre(cursor.getString(offset + 3));
        entity.setSegNombre(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSexo(cursor.getInt(offset + 5));
        entity.setFecExpedicion(cursor.getString(offset + 6));
        entity.setCodProv(cursor.getString(offset + 7));
        entity.setCodMpio(cursor.getString(offset + 8));
        entity.setCodZona(cursor.getString(offset + 9));
        entity.setCodColElec(cursor.getString(offset + 10));
        entity.setCodMesa(cursor.getString(offset + 11));
        entity.setTipoElector(cursor.getInt(offset + 12));
        entity.setElectorImpedido(cursor.getInt(offset + 13));
        entity.setFoto(cursor.getBlob(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Censo entity, long rowId) {
        return entity.getCedula();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Censo entity) {
        if(entity != null) {
            return entity.getCedula();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
