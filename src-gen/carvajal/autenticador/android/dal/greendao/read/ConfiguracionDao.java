package carvajal.autenticador.android.dal.greendao.read;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import carvajal.autenticador.android.dal.greendao.read.Configuracion;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONFIGURACION.
*/
public class ConfiguracionDao extends AbstractDao<Configuracion, Long> {

    public static final String TABLENAME = "CONFIGURACION";

    /**
     * Properties of entity Configuracion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CodProv = new Property(1, String.class, "CodProv", false, "COD_PROV");
        public final static Property CodMpio = new Property(2, String.class, "CodMpio", false, "COD_MPIO");
        public final static Property CodZona = new Property(3, String.class, "CodZona", false, "COD_ZONA");
        public final static Property CodColElec = new Property(4, String.class, "CodColElec", false, "COD_COL_ELEC");
        public final static Property CodMesa = new Property(5, String.class, "CodMesa", false, "COD_MESA");
        public final static Property NombreBD = new Property(6, String.class, "NombreBD", false, "NOMBRE_BD");
        public final static Property ConfActiva = new Property(7, int.class, "ConfActiva", false, "CONF_ACTIVA");
        public final static Property IPServidor = new Property(8, String.class, "IPServidor", false, "IPSERVIDOR");
    };


    public ConfiguracionDao(DaoConfig config) {
        super(config);
    }
    
    public ConfiguracionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONFIGURACION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'COD_PROV' TEXT NOT NULL ," + // 1: CodProv
                "'COD_MPIO' TEXT NOT NULL ," + // 2: CodMpio
                "'COD_ZONA' TEXT NOT NULL ," + // 3: CodZona
                "'COD_COL_ELEC' TEXT NOT NULL ," + // 4: CodColElec
                "'COD_MESA' TEXT NOT NULL ," + // 5: CodMesa
                "'NOMBRE_BD' TEXT NOT NULL ," + // 6: NombreBD
                "'CONF_ACTIVA' INTEGER NOT NULL ," + // 7: ConfActiva
                "'IPSERVIDOR' TEXT NOT NULL );"); // 8: IPServidor
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONFIGURACION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Configuracion entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCodProv());
        stmt.bindString(3, entity.getCodMpio());
        stmt.bindString(4, entity.getCodZona());
        stmt.bindString(5, entity.getCodColElec());
        stmt.bindString(6, entity.getCodMesa());
        stmt.bindString(7, entity.getNombreBD());
        stmt.bindLong(8, entity.getConfActiva());
        stmt.bindString(9, entity.getIPServidor());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Configuracion readEntity(Cursor cursor, int offset) {
        Configuracion entity = new Configuracion( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // CodProv
            cursor.getString(offset + 2), // CodMpio
            cursor.getString(offset + 3), // CodZona
            cursor.getString(offset + 4), // CodColElec
            cursor.getString(offset + 5), // CodMesa
            cursor.getString(offset + 6), // NombreBD
            cursor.getInt(offset + 7), // ConfActiva
            cursor.getString(offset + 8) // IPServidor
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Configuracion entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCodProv(cursor.getString(offset + 1));
        entity.setCodMpio(cursor.getString(offset + 2));
        entity.setCodZona(cursor.getString(offset + 3));
        entity.setCodColElec(cursor.getString(offset + 4));
        entity.setCodMesa(cursor.getString(offset + 5));
        entity.setNombreBD(cursor.getString(offset + 6));
        entity.setConfActiva(cursor.getInt(offset + 7));
        entity.setIPServidor(cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Configuracion entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Configuracion entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
